// <auto-generated />
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using ECNC3.Models.McIf;

namespace DebugMcIf
{
	public partial class FormSwitching : Form
	{
		public FormSwitching()
		{
			InitializeComponent();
		}

		private void FormSwitching_Load( object sender, EventArgs e )
		{
			Reload();
		}
		private void _btnCancel_Click( object sender, EventArgs e )
		{
			Close();
		}
		private void CloseWindow()
		{
			if( true == _chkOneTime.Checked ) {
				Close();
			} else {
				Reload();
			}
		}
		private void Reload()
		{
			AidControl aid = new AidControl();
			using( McDatIOData mc = new McDatIOData() ) {
				mc.Read();
				aid.SetState( _btnBuzzer, mc.Buzzer );
			}
			using( McDatStatus mc = new McDatStatus() ) {
				mc.Read();
				aid.SetState( _btnReqHandlePermitOn, mc.Status.HandPulserPermition );
				aid.SetState( _btnReqOptionalStopOn, mc.Status.OptionalStop );
				aid.SetState( _btnReqTouchSensor, mc.Status.TouchSensor );
				aid.SetState( _btnIncrimentalReferenceAxisMove, mc.Status.IncrimentalReferenceAxisMove );
				aid.SetState( _btnInterlockXY, mc.Status.InterlockXY ? false : true );
				aid.SetState( _btnAutoModeOutput, mc.Status.AutoModeOutput );
				aid.SetState( _btnReqShutDown, mc.Status.RequestShutDown );
				aid.SetState( _btnReqShowMessageSignal, mc.Status.RequestShowMessage );
				aid.SetState( _btnCorrectAngle, mc.Status.CorrectAngle );
				aid.SetState( _btnBlockSkip, mc.Status.BlockSkip );
			}
			using( McDatProcessCondition mc = new McDatProcessCondition() ) {
				mc.Read();
				aid.SetState( _btnAecByLife, mc.AecByLife );
				aid.SetState( _btnDryRun, mc.DryRun );
				aid.SetState( _btnInitialSet, mc.InitialSet );
				aid.SetState( _btnReqSendBackSignal, mc.RequestSendingBack );
				aid.SetState( _btnPartitionRoundStop, mc.PartitionRoundStop );
			}
		}
		/// <summary>ハンドパルサ有効／無効切り替え</summary>
		/// <param name="sender">イベント送信元</param>
		/// <param name="e">イベント引数</param>
		private void _btnReqHandlePermitOn_Click( object sender, EventArgs e )
		{
			using( McReqHandPulserEnabled mc = new McReqHandPulserEnabled() )
			using( McDatStatus status = new McDatStatus() ) {
				status.Read();
				mc.Enabled = ( true == status.Status.HandPulserPermition ) ? false : true;
				mc.Execute();
			}
			CloseWindow();
		}

		private void _btnReqTouchSensor_Click( object sender, EventArgs e )
		{
			using( McReqTouchSensorEnabled mc = new McReqTouchSensorEnabled() )
			using( McDatStatus status = new McDatStatus() ) {
				status.Read();
				mc.Enabled = ( true == status.Status.TouchSensor ) ? false : true;
				mc.Execute();
			}
			CloseWindow();
		}

		private void _btnInterlockXY_Click( object sender, EventArgs e )
		{
			using( McReqAxisXYInterlock mc = new McReqAxisXYInterlock() )
			using( McDatStatus status = new McDatStatus() ) {
				status.Read();
				mc.Enabled = ( true == status.Status.InterlockXY ) ? false : true;
				mc.Execute();
			}
			CloseWindow();
		}

		/// <summary>オプショナルストップ</summary>
		/// <param name="sender">イベント送信元</param>
		/// <param name="e">イベント引数</param>
		private void _btnReqOptionalStopOn_Click( object sender, EventArgs e )
		{
			using( McReqOptionalStopEnabled mc = new McReqOptionalStopEnabled() )
			using( McDatStatus status = new McDatStatus() ) {
				status.Read();
				mc.Enabled = ( true == status.Status.OptionalStop ) ? false : true;
				mc.Execute();
			}
			CloseWindow();
		}

		private void _btnIncrimentalReferenceAxisMove_Click( object sender, EventArgs e )
		{
			using( McReqIncrimentalReferenceAxisMoveEnable mc = new McReqIncrimentalReferenceAxisMoveEnable() )
			using( McDatStatus status = new McDatStatus() ) {
				status.Read();
				mc.Enabled = ( true == status.Status.IncrimentalReferenceAxisMove ) ? false : true;
				mc.Execute();
			}
			CloseWindow();
		}


		private void _btnAecByLife_Click( object sender, EventArgs e )
		{
			using( McReqAecByLifeEnabled mc = new McReqAecByLifeEnabled() )
			using( McDatProcessCondition status = new McDatProcessCondition() ) {
				status.Read();
				mc.Enabled = ( true == status.AecByLife ) ? false : true;
				mc.Execute();
			}
			CloseWindow();
		}

		private void _btnDryRun_Click( object sender, EventArgs e )
		{
			using( McReqDryRunEnabled mc = new McReqDryRunEnabled() )
			using( McDatProcessCondition status = new McDatProcessCondition() ) {
				status.Read();
				mc.Enabled = ( true == status.DryRun ) ? false : true;
				mc.Execute();
			}
			CloseWindow();
		}

		private void _btnInitialSet_Click( object sender, EventArgs e )
		{
			using( McReqInitialSetEnabled mc = new McReqInitialSetEnabled() )
			using( McDatProcessCondition status = new McDatProcessCondition() ) {
				status.Read();
				mc.Enabled = ( true == status.InitialSet ) ? false : true;
				mc.Execute();
			}
			CloseWindow();
		}
		private void _btnReqSendBackSignal_Click( object sender, EventArgs e )
		{
			using( McDatProcessCondition pc = new McDatProcessCondition() )
			using( McIfDebugEmulation mc = new McIfDebugEmulation() ) {
				pc.Read();
				mc.SignalSendingBack( ( true == pc.RequestSendingBack ) ? false : true );
			}
			CloseWindow();
		}
		private void _btnReqSendBack_Click( object sender, EventArgs e )
		{
			using( McReqSendingBack mc = new McReqSendingBack() ) {
				mc.Execute();
			}
			CloseWindow();
		}
		private void FormSwitching_Deactivate( object sender, EventArgs e )
		{
			Close();
		}

		private void _btnBuzzer_Click( object sender, EventArgs e )
		{
			using( McDatIOData io = new McDatIOData() )
			using( McReqBuzzerEnabled mc = new McReqBuzzerEnabled() ) {
				io.Read();
				mc.Enabled = ( true == io.Buzzer ) ? false : true;
				mc.Execute();
			}
			CloseWindow();
		}

		private void _btnAutoModeOutput_Click( object sender, EventArgs e )
		{
			using( McDatStatus status = new McDatStatus() )
			using( McReqAutoModeOutput mc = new McReqAutoModeOutput() ) {
				status.Read();
				mc.SettingValue = ( true == status.Status.AutoModeOutput ) ? false : true;
				mc.Execute();
			}
			CloseWindow();
		}

		private void _btnReqShutDown_Click( object sender, EventArgs e )
		{
			using( McDatStatus status = new McDatStatus() )
			using( McReqShutDownStart mc = new McReqShutDownStart() ) {
				status.Read();
				mc.SettingValue = ( true == status.Status.RequestShutDown ) ? false : true;
				mc.Execute();
			}
			CloseWindow();
		}

		private void _btnReqShowMessageSignal_Click( object sender, EventArgs e )
		{
			using( McDatStatus pc = new McDatStatus() )
			using( McIfDebugEmulation mc = new McIfDebugEmulation() ) {
				pc.Read();
				mc.SignalShowMessage( ( true == pc.Status.RequestShowMessage ) ? false : true );
			}
			CloseWindow();
		}

		private McDatShowMessage _datShowMessage = null;
		private void _btnReqShowMessage_Click( object sender, EventArgs e )
		{
			if( null == _datShowMessage ) {
				_datShowMessage = new McDatShowMessage();
			}
			_datShowMessage.Read();
			_stcReqShowMessage.Text = $"Type={_datShowMessage.RequsetProgramType},"
									+ $"Code={_datShowMessage.RequsetCode},"
									+ $"Msg={_datShowMessage.RequsetMessageNumber}";
		}

		private void _btnReqShowMessageAnswer_Click( object sender, EventArgs e )
		{
			if( null == _datShowMessage ) {
				//	ここを通った時点で関数は失敗しなければならない。
				_datShowMessage = new McDatShowMessage();
			}
			if( null != _datShowMessage ) {
				_datShowMessage.AnswerInputNumber = (double)_edtInputNumber.Value;
				_datShowMessage.AnswerSelectedButtonNumber = (short)_edtButtonNumber.Value;
				_datShowMessage.Write();
				_datShowMessage.Dispose();
				_datShowMessage = null;
			}
			CloseWindow();
		}

		private void _btnPartitionRoundStop_Click( object sender, EventArgs e )
		{
			using( McDatProcessCondition pc = new McDatProcessCondition() )
			using( McReqPartitionRoundStopEnabled mc = new McReqPartitionRoundStopEnabled() ) {
				pc.Read();
				mc.Enabled = ( ( true == pc.PartitionRoundStop ) ? false : true );
				mc.Execute();
			}
			CloseWindow();
		}

		private void _btnCorrectAngle_Click( object sender, EventArgs e )
		{
			using( McDatStatus pc = new McDatStatus() )
			using( McReqCorrectAngleEnabled mc = new McReqCorrectAngleEnabled() ) {
				pc.Read();
				mc.Enabled = ( ( true == pc.Status.CorrectAngle ) ? false : true );
				mc.Execute();
			}
			CloseWindow();
		}

		private void _btnBlockSkip_Click( object sender, EventArgs e )
		{
			using( McDatStatus pc = new McDatStatus() )
			using( McReqBlockSkipEnabled mc = new McReqBlockSkipEnabled() ) {
				pc.Read();
				mc.Enabled = ( ( true == pc.Status.BlockSkip ) ? false : true );
				mc.Execute();
			}
			CloseWindow();
		}

		private void _btnReqMachineLock_Click( object sender, EventArgs e )
		{
			using( McDatStatus pc = new McDatStatus() )
			using( McReqMachineLockEnabled mc = new McReqMachineLockEnabled() ) {
				mc.Enabled = ( true == pc.Status.MachineLock ) ? false : true;
				mc.Execute();
			}
		}
	}
}
